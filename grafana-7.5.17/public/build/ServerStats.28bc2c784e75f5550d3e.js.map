{"version":3,"sources":["webpack:///./public/app/features/admin/ServerStats.tsx","webpack:///./public/app/features/admin/state/apis.tsx"],"names":["ServerStats","state","stats","isLoading","this","props","getServerStats","setState","console","error","navModel","Contents","className","map","StatItem","PureComponent","stat","key","name","tooltip","content","placement","value","hot","module","connect","getNavModel","navIndex","hasLicense","config","licenseInfo","getBackendSrv","get","res","users","admins","editors","viewers","activeUsers","href","activeAdmins","activeEditors","activeViewers","activeSessions","dashboards","orgs","playlists","snapshots","tags","stars","alerts","datasources"],"mappings":"0vCAoBO,IAAMA,EAAb,6KACEC,MAAe,CACbC,MAAO,GACPC,WAAW,GAHf,E,YAAA,S,kOAAA,M,EAAA,G,EAAA,iC,EAAA,qJAQ0BC,KAAKC,MAAMC,iBARrC,OAQYJ,EARZ,OASME,KAAKG,SAAS,CAAEL,QAAOC,WAAW,IATxC,gDAWMK,QAAQC,MAAR,MAXN,0D,8KAAA,4EAeW,IACCC,EAAaN,KAAKC,MAAlBK,SADD,EAEsBN,KAAKH,MAA1BC,EAFD,EAECA,MAAOC,EAFR,EAEQA,UAEf,OACE,kBAAC,IAAD,CAAMO,SAAUA,GACd,kBAAC,IAAKC,SAAN,CAAeR,UAAWA,GACxB,2BAAOS,UAAU,4BACf,+BACE,4BACE,oCACA,uCAGJ,+BAAQV,EAAMW,IAAIC,Y,2BA7B9B,GAAiCC,iBAqCjC,SAASD,EAASE,GAChB,OACE,wBAAIC,IAAKD,EAAKE,MACZ,4BACGF,EAAKE,KAAM,IACXF,EAAKG,SACJ,kBAAC,UAAD,CAASC,QAASJ,EAAKG,QAASE,UAAW,OACzC,kBAAC,OAAD,CAAMH,KAAM,kBAIlB,4BAAKF,EAAKM,QAUDC,wBAAIC,EAAJD,CAAYE,mBALH,SAACxB,GAAD,MAAwB,CAC9CS,SAAUgB,YAAYzB,EAAM0B,SAAU,gBACtCrB,eAAgBA,OAGSmB,CAAyBzB,K,olBCnE5C4B,E,UAAeC,EAAOC,YAAtBF,WAEKtB,EAAc,e,EAAA,G,EAAA,yBAAG,4HAERyB,0BAAgBC,IAAI,mBAFZ,cAEpBC,EAFoB,0BAIxB,CAAEf,KAAM,cAAeI,MAAOW,EAAIC,QAJV,SAKnBN,EAMD,GALA,CACE,CAAEV,KAAM,eAAgBI,MAAOW,EAAIE,QACnC,CAAEjB,KAAM,gBAAiBI,MAAOW,EAAIG,SACpC,CAAElB,KAAM,gBAAiBI,MAAOW,EAAII,WATlB,CAYxB,CACEnB,KAAM,mCACNI,MAAOW,EAAIK,YACXnB,QAASS,EACL,kBACE,8EACyC,uBAAGW,KAAK,oBAAR,kBADzC,MAIF,KArBkB,EAuBnBX,EAMD,GALA,CACE,CAAEV,KAAM,oCAAqCI,MAAOW,EAAIO,cACxD,CAAEtB,KAAM,qCAAsCI,MAAOW,EAAIQ,eACzD,CAAEvB,KAAM,qCAAsCI,MAAOW,EAAIS,iBA3BvC,CA8BxB,CAAExB,KAAM,kBAAmBI,MAAOW,EAAIU,gBACtC,CAAEzB,KAAM,mBAAoBI,MAAOW,EAAIW,YACvC,CAAE1B,KAAM,aAAcI,MAAOW,EAAIY,MACjC,CAAE3B,KAAM,kBAAmBI,MAAOW,EAAIa,WACtC,CAAE5B,KAAM,kBAAmBI,MAAOW,EAAIc,WACtC,CAAE7B,KAAM,uBAAwBI,MAAOW,EAAIe,MAC3C,CAAE9B,KAAM,2BAA4BI,MAAOW,EAAIgB,OAC/C,CAAE/B,KAAM,eAAgBI,MAAOW,EAAIiB,QACnC,CAAEhC,KAAM,qBAAsBI,MAAOW,EAAIkB,gBAtCjB,sCAyC1B3C,QAAQC,MAAR,MAzC0B,6D,+KAAH","file":"ServerStats.28bc2c784e75f5550d3e.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { Icon, Tooltip } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { getServerStats, ServerStat } from './state/apis';\n\ninterface Props {\n  navModel: NavModel;\n  getServerStats: () => Promise<ServerStat[]>;\n}\n\ninterface State {\n  stats: ServerStat[];\n  isLoading: boolean;\n}\n\nexport class ServerStats extends PureComponent<Props, State> {\n  state: State = {\n    stats: [],\n    isLoading: true,\n  };\n\n  async componentDidMount() {\n    try {\n      const stats = await this.props.getServerStats();\n      this.setState({ stats, isLoading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  render() {\n    const { navModel } = this.props;\n    const { stats, isLoading } = this.state;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <table className=\"filter-table form-inline\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>{stats.map(StatItem)}</tbody>\n          </table>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction StatItem(stat: ServerStat) {\n  return (\n    <tr key={stat.name}>\n      <td>\n        {stat.name}{' '}\n        {stat.tooltip && (\n          <Tooltip content={stat.tooltip} placement={'top'}>\n            <Icon name={'info-circle'} />\n          </Tooltip>\n        )}\n      </td>\n      <td>{stat.value}</td>\n    </tr>\n  );\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'server-stats'),\n  getServerStats: getServerStats,\n});\n\nexport default hot(module)(connect(mapStateToProps)(ServerStats));\n","import React from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { PopoverContent } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nexport interface ServerStat {\n  name: string;\n  value: number;\n  tooltip?: PopoverContent;\n}\n\nconst { hasLicense } = config.licenseInfo;\n\nexport const getServerStats = async (): Promise<ServerStat[]> => {\n  try {\n    const res = await getBackendSrv().get('api/admin/stats');\n    return [\n      { name: 'Total users', value: res.users },\n      ...(!hasLicense\n        ? [\n            { name: 'Total admins', value: res.admins },\n            { name: 'Total editors', value: res.editors },\n            { name: 'Total viewers', value: res.viewers },\n          ]\n        : []),\n      {\n        name: 'Active users (seen last 30 days)',\n        value: res.activeUsers,\n        tooltip: hasLicense\n          ? () => (\n              <>\n                For active user count by role, see the <a href=\"/admin/licensing\">Licensing page</a>.\n              </>\n            )\n          : '',\n      },\n      ...(!hasLicense\n        ? [\n            { name: 'Active admins (seen last 30 days)', value: res.activeAdmins },\n            { name: 'Active editors (seen last 30 days)', value: res.activeEditors },\n            { name: 'Active viewers (seen last 30 days)', value: res.activeViewers },\n          ]\n        : []),\n      { name: 'Active sessions', value: res.activeSessions },\n      { name: 'Total dashboards', value: res.dashboards },\n      { name: 'Total orgs', value: res.orgs },\n      { name: 'Total playlists', value: res.playlists },\n      { name: 'Total snapshots', value: res.snapshots },\n      { name: 'Total dashboard tags', value: res.tags },\n      { name: 'Total starred dashboards', value: res.stars },\n      { name: 'Total alerts', value: res.alerts },\n      { name: 'Total data sources', value: res.datasources },\n    ];\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n"],"sourceRoot":""}